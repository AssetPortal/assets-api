// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/AssetPortal/assets-api/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// VerifySignature provides a mock function with given fields: ctx, message, address, signature
func (_m *Client) VerifySignature(ctx context.Context, message string, address string, signature string) (*model.Auth, error) {
	ret := _m.Called(ctx, message, address, signature)

	if len(ret) == 0 {
		panic("no return value specified for VerifySignature")
	}

	var r0 *model.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*model.Auth, error)); ok {
		return rf(ctx, message, address, signature)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *model.Auth); ok {
		r0 = rf(ctx, message, address, signature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, message, address, signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_VerifySignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifySignature'
type Client_VerifySignature_Call struct {
	*mock.Call
}

// VerifySignature is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - address string
//   - signature string
func (_e *Client_Expecter) VerifySignature(ctx interface{}, message interface{}, address interface{}, signature interface{}) *Client_VerifySignature_Call {
	return &Client_VerifySignature_Call{Call: _e.mock.On("VerifySignature", ctx, message, address, signature)}
}

func (_c *Client_VerifySignature_Call) Run(run func(ctx context.Context, message string, address string, signature string)) *Client_VerifySignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Client_VerifySignature_Call) Return(_a0 *model.Auth, _a1 error) *Client_VerifySignature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_VerifySignature_Call) RunAndReturn(run func(context.Context, string, string, string) (*model.Auth, error)) *Client_VerifySignature_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
