// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/AssetPortal/assets-api/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function with given fields: ctx, token
func (_m *Repository) CreateToken(ctx context.Context, token *model.Token) (*model.Token, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 *model.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Token) (*model.Token, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Token) *model.Token); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Token) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type Repository_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token *model.Token
func (_e *Repository_Expecter) CreateToken(ctx interface{}, token interface{}) *Repository_CreateToken_Call {
	return &Repository_CreateToken_Call{Call: _e.mock.On("CreateToken", ctx, token)}
}

func (_c *Repository_CreateToken_Call) Run(run func(ctx context.Context, token *model.Token)) *Repository_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Token))
	})
	return _c
}

func (_c *Repository_CreateToken_Call) Return(_a0 *model.Token, _a1 error) *Repository_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_CreateToken_Call) RunAndReturn(run func(context.Context, *model.Token) (*model.Token, error)) *Repository_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetToken provides a mock function with given fields: ctx, token
func (_m *Repository) GetToken(ctx context.Context, token string) (*model.Token, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 *model.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Token, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Token); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type Repository_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *Repository_Expecter) GetToken(ctx interface{}, token interface{}) *Repository_GetToken_Call {
	return &Repository_GetToken_Call{Call: _e.mock.On("GetToken", ctx, token)}
}

func (_c *Repository_GetToken_Call) Run(run func(ctx context.Context, token string)) *Repository_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetToken_Call) Return(_a0 *model.Token, _a1 error) *Repository_GetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetToken_Call) RunAndReturn(run func(context.Context, string) (*model.Token, error)) *Repository_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// MarkTokenAsUsed provides a mock function with given fields: ctx, token
func (_m *Repository) MarkTokenAsUsed(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for MarkTokenAsUsed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_MarkTokenAsUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkTokenAsUsed'
type Repository_MarkTokenAsUsed_Call struct {
	*mock.Call
}

// MarkTokenAsUsed is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *Repository_Expecter) MarkTokenAsUsed(ctx interface{}, token interface{}) *Repository_MarkTokenAsUsed_Call {
	return &Repository_MarkTokenAsUsed_Call{Call: _e.mock.On("MarkTokenAsUsed", ctx, token)}
}

func (_c *Repository_MarkTokenAsUsed_Call) Run(run func(ctx context.Context, token string)) *Repository_MarkTokenAsUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_MarkTokenAsUsed_Call) Return(_a0 error) *Repository_MarkTokenAsUsed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_MarkTokenAsUsed_Call) RunAndReturn(run func(context.Context, string) error) *Repository_MarkTokenAsUsed_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
