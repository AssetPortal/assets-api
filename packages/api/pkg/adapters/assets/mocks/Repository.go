// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/AssetPortal/assets-api/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateAsset provides a mock function with given fields: ctx, asset
func (_m *Repository) CreateAsset(ctx context.Context, asset *model.Asset) (*model.Asset, error) {
	ret := _m.Called(ctx, asset)

	if len(ret) == 0 {
		panic("no return value specified for CreateAsset")
	}

	var r0 *model.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Asset) (*model.Asset, error)); ok {
		return rf(ctx, asset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Asset) *model.Asset); ok {
		r0 = rf(ctx, asset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Asset) error); ok {
		r1 = rf(ctx, asset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CreateAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAsset'
type Repository_CreateAsset_Call struct {
	*mock.Call
}

// CreateAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - asset *model.Asset
func (_e *Repository_Expecter) CreateAsset(ctx interface{}, asset interface{}) *Repository_CreateAsset_Call {
	return &Repository_CreateAsset_Call{Call: _e.mock.On("CreateAsset", ctx, asset)}
}

func (_c *Repository_CreateAsset_Call) Run(run func(ctx context.Context, asset *model.Asset)) *Repository_CreateAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Asset))
	})
	return _c
}

func (_c *Repository_CreateAsset_Call) Return(_a0 *model.Asset, _a1 error) *Repository_CreateAsset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_CreateAsset_Call) RunAndReturn(run func(context.Context, *model.Asset) (*model.Asset, error)) *Repository_CreateAsset_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAsset provides a mock function with given fields: ctx, id, address
func (_m *Repository) DeleteAsset(ctx context.Context, id string, address string) error {
	ret := _m.Called(ctx, id, address)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAsset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAsset'
type Repository_DeleteAsset_Call struct {
	*mock.Call
}

// DeleteAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - address string
func (_e *Repository_Expecter) DeleteAsset(ctx interface{}, id interface{}, address interface{}) *Repository_DeleteAsset_Call {
	return &Repository_DeleteAsset_Call{Call: _e.mock.On("DeleteAsset", ctx, id, address)}
}

func (_c *Repository_DeleteAsset_Call) Run(run func(ctx context.Context, id string, address string)) *Repository_DeleteAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_DeleteAsset_Call) Return(_a0 error) *Repository_DeleteAsset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_DeleteAsset_Call) RunAndReturn(run func(context.Context, string, string) error) *Repository_DeleteAsset_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetAssetByID(ctx context.Context, id string) (*model.Asset, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetByID")
	}

	var r0 *model.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Asset, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Asset); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAssetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssetByID'
type Repository_GetAssetByID_Call struct {
	*mock.Call
}

// GetAssetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repository_Expecter) GetAssetByID(ctx interface{}, id interface{}) *Repository_GetAssetByID_Call {
	return &Repository_GetAssetByID_Call{Call: _e.mock.On("GetAssetByID", ctx, id)}
}

func (_c *Repository_GetAssetByID_Call) Run(run func(ctx context.Context, id string)) *Repository_GetAssetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetAssetByID_Call) Return(_a0 *model.Asset, _a1 error) *Repository_GetAssetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAssetByID_Call) RunAndReturn(run func(context.Context, string) (*model.Asset, error)) *Repository_GetAssetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssets provides a mock function with given fields: ctx, filters
func (_m *Repository) GetAssets(ctx context.Context, filters *model.GetAssetsInput) ([]*model.Asset, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetAssets")
	}

	var r0 []*model.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetAssetsInput) ([]*model.Asset, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetAssetsInput) []*model.Asset); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetAssetsInput) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssets'
type Repository_GetAssets_Call struct {
	*mock.Call
}

// GetAssets is a helper method to define mock.On call
//   - ctx context.Context
//   - filters *model.GetAssetsInput
func (_e *Repository_Expecter) GetAssets(ctx interface{}, filters interface{}) *Repository_GetAssets_Call {
	return &Repository_GetAssets_Call{Call: _e.mock.On("GetAssets", ctx, filters)}
}

func (_c *Repository_GetAssets_Call) Run(run func(ctx context.Context, filters *model.GetAssetsInput)) *Repository_GetAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.GetAssetsInput))
	})
	return _c
}

func (_c *Repository_GetAssets_Call) Return(_a0 []*model.Asset, _a1 error) *Repository_GetAssets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAssets_Call) RunAndReturn(run func(context.Context, *model.GetAssetsInput) ([]*model.Asset, error)) *Repository_GetAssets_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAsset provides a mock function with given fields: ctx, asset
func (_m *Repository) UpdateAsset(ctx context.Context, asset *model.Asset) error {
	ret := _m.Called(ctx, asset)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Asset) error); ok {
		r0 = rf(ctx, asset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpdateAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAsset'
type Repository_UpdateAsset_Call struct {
	*mock.Call
}

// UpdateAsset is a helper method to define mock.On call
//   - ctx context.Context
//   - asset *model.Asset
func (_e *Repository_Expecter) UpdateAsset(ctx interface{}, asset interface{}) *Repository_UpdateAsset_Call {
	return &Repository_UpdateAsset_Call{Call: _e.mock.On("UpdateAsset", ctx, asset)}
}

func (_c *Repository_UpdateAsset_Call) Run(run func(ctx context.Context, asset *model.Asset)) *Repository_UpdateAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Asset))
	})
	return _c
}

func (_c *Repository_UpdateAsset_Call) Return(_a0 error) *Repository_UpdateAsset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UpdateAsset_Call) RunAndReturn(run func(context.Context, *model.Asset) error) *Repository_UpdateAsset_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
